<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<description>== Shiro Components ==</description>
    
	<!-- 缓存管理器 使用Ehcache实现 -->
   <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>

    <!-- 凭证匹配器 -->
    <!-- <bean id="credentialsMatcher" class="com.github.zhangkaitao.shiro.chapter12.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean> -->

    <!-- Realm实现 -->
    <bean id="userRealm" class="com.yunyitg.cesp.system.shiro.realm.UserRealm">
       <!--  <property name="userService" ref="userService"/>
        <property name="credentialsMatcher" ref="credentialsMatcher"/> -->
        <!-- <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/> -->
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="180000"/>
    </bean>

    <!-- 用户信息记住我功能的相关配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="rememberMe"/>
	    <property name="httpOnly" value="true"/>
	    <!-- 配置存储rememberMe Cookie的domain为 一级域名		这里如果配置需要和Session回话一致更好。
	     <property name="domain" value="eh.itboy.net/shiro.ehcache"/>
	     -->
	    <property name="maxAge" value="2592000"/><!-- 30天时间，记住我30天 -->
	</bean>
	
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
	    <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
	    <property name="cipherKey"
	              value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
	    <property name="cookie" ref="rememberMeCookie"/>
	</bean>
	
	<!-- 会话DAO -->
    <!-- <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean> -->
	<bean id="customShiroSessionDAO" class="com.yunyitg.cesp.system.shiro.CustomShiroSessionDAO">
	    <property name="shiroSessionRepository" ref="sessionShiroCacheManager"/>
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	
	<!-- 手动操作Session，管理Session -->
	<bean id="customSessionManager" class="com.yunyitg.cesp.system.shiro.session.CustomSessionManager">
		<property name="shiroSessionRepository" ref="sessionShiroCacheManager"/>
		 <property name="customShiroSessionDAO" ref="customShiroSessionDAO"/>
	</bean>
	
	<!-- custom shiro session listener -->
	<bean id="customSessionListener" class="com.yunyitg.cesp.system.shiro.listener.CustomSessionListener">
	    <property name="sessionShiroCacheManager" ref="sessionShiroCacheManager"/>
	</bean>
	
	<!-- session 创建、删除、查询 -->
	<bean id="sessionShiroCacheManager" class="com.yunyitg.cesp.system.shiro.cache.impl.SessionShiroCacheManager" >
		 <property name="ehCacheManager" ref="shiroCacheManager"/>
	</bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="customShiroSessionDAO"/>
        <!-- session 监听，可以多个。 -->
	   	<property name="sessionListeners">
	       <list>
	           <ref bean="customSessionListener"/>
	       </list>
	  	</property>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <!-- <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/login"/>
    </bean> -->
    
    <!-- 认证数据库存储-->
    <bean id="shiroManager" class="com.yunyitg.cesp.system.shiro.service.impl.ShiroManagerImpl"/>
    <!-- 自定义Filter ，用来校验是否登录-->
    <bean id="login" class="com.yunyitg.cesp.system.shiro.filter.LoginFilter"/>
    <!-- 自定义ShiroFilter，用来校验角色权限 -->
    <bean id="role" class="com.yunyitg.cesp.system.shiro.filter.RoleFilter"/>
    <!-- 自定义ShiroFilter，用来校验URL权限 -->
    <bean id="permission" class="com.yunyitg.cesp.system.shiro.filter.PermissionFilter"/>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/" />
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="filters">
            <util:map>
                <!-- <entry key="authc" value-ref="formAuthenticationFilter"/> -->
                <entry key="login" value-ref="login"/>
                <entry key="role" value-ref="role"/>
                <entry key="permission" value-ref="permission"></entry>
            </util:map>
        </property>
        <property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}">
            <!-- <value>
            	/order/** = authc
            	/waybill/** = authc
            	/invt/** = authc
                /login= anon
                /unauthorized = anon
                /index = authc
                /logout = logout
                /resource/* = anon
                /api/* = anon
                /** = user
            </value> -->
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>