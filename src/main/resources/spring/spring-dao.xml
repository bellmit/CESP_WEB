<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd"
>

    <!--配置整合mybatis过程-->

    <!--1、配置数据库相关参数-->
    <!-- <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/> -->

    <!--2.数据源druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" 
			init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		 <!-- 配置初始化大小、最小、最大 -->  
	    <property name="initialSize" value="${druid.pool.size.init}" />  
	    <property name="minIdle" value="${druid.pool.size.min}" />   
	    <property name="maxActive" value="${druid.pool.size.max}" />
	    
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="10000" />
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	
	    <property name="testWhileIdle" value="true" />
	
	    <!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
	    <property name="testOnBorrow" value="true" /> 
	    <property name="testOnReturn" value="false" />
	
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
	    <property name="poolPreparedStatements" value="true" /> 
	    <property name="maxPoolPreparedStatementPerConnectionSize" 
	     value="20" />
	
	    <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
	
	    <property name="defaultAutoCommit" value="true" />
	
	    <!-- 验证连接有效与否的SQL，不同的数据配置不同 --> 
	    <property name="validationQuery" value="select 1 " /> 
	    <property name="filters" value="stat" /> 
	    <property name="proxyFilters"> 
	     <list> 
	      <ref bean="logFilter" /> 
	     </list> 
	    </property> 
	  </bean>
	
	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
	  <property name="statementExecutableSqlLogEnable" value="false" /> 
	    
	</bean>
	<!-- 2.数据库连接池 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        配置连接池属性
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        c3p0连接池的私有属性
        <property name="maxPoolSize" value="${c3p0.pool.size.max}" />
        <property name="minPoolSize" value="${c3p0.pool.size.min}" />
        关闭连接后不自动commit
        <property name="autoCommitOnClose" value="false" />
        获取连接超时时间
        <property name="checkoutTimeout" value="10000" />
        当获取连接失败重试次数
        <property name="acquireRetryAttempts" value="2" />
    </bean> -->
	
    

    <!--3、配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包,使用别名,多个用;隔开-->
       <!--  <property name="typeAliasesPackage" value="com.yunyi.cbec.*.entity;com.yunyi.cbec.core.*.entity"/> -->
        <property name="typeAliasesPackage" value="com.yunyitg.cesp.**.entity" />
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <!-- <property name="mapperLocations">
		    <array>                
		        <value>classpath:mapper/list/*.xml</value>
		        <value>classpath:mapper/order/*.xml</value>
		        <value>classpath:mapper/waybill/*.xml</value>
		        <value>classpath:mapper/payment/*.xml</value>
		        <value>classpath:mapper/company/*.xml</value>
		        <value>classpath:mapper/user/*.xml</value>
		        <value>classpath:mapper/message/*.xml</value>         
		    </array>
		</property> -->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>
    
    <!-- 集成通用mapper设置 -->
    <!--  <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yunyitg.gzkj.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类
        <property name="markerInterface" value="com.yunyitg.gzkj.system.utils.MyMapper"/>
        通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口
        
    </bean> -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.yunyitg.cesp.**.dao"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <property name="properties">
        <value>
            mappers=tk.mybatis.mapper.common.Mapper,com.yunyitg.cesp.common.mapper.MyMapper
            IDENTITY=MYSQL
            notEmpty=true
        </value>
    </property>
</bean>

    <!--4、配置扫描Dao接口包,动态实现DAO接口,注入到spring容器-->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        注入SqlSessionFactory
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        给出需要扫描的Dao接口
        <property name="basePackage" value="com.yunyitg.cesp.**.dao"/>
    </bean> -->

</beans>
